---
title: "Impact of Oil Price Volatility on Taiwanese Stock Return"
author: "Patrick Wang" 
date: "2023-09-07"
format:
  pdf:
    documentclass: article
    margin-left: 0.75in
    margin-right: 0.75in
    margin-top: 0.75in
    margin-bottom: 0.75in
    toc: true
  html:
    theme: cosmo
    css: ../styles.css
    toc: true
    code-copy: true
    code-block-background: true
execute:
  freeze: auto
---

# 1. Load Data 

This paper investigates the influence of oil price volatility on Taiwan aggregate and individual stock returns from January 1, 2010, to December 31, 2021, because the Taiwan stock market’s market structure has become more stable since the 2008 financial crisis. In  the  empirical  analysis,  the  daily  data  are  used  because  the  OVX  index  is  a  way  to measure how volatile oil prices are in the short term. All the return data are denoted as daily return percentage.

## 1.1 Packages and default settings

```{python}
import pandas as pd
import yfinance as yf
import os
import requests
import csv
from bs4 import BeautifulSoup as bs
import matplotlib.pyplot as plt
import statsmodels.api as sm


# Get the current working directory
print(os.getcwd())
os.chdir('/Users/patrickwang/Documents/ovx-py-repo/')
print(os.getcwd())

start_date = "2010-01-01"
end_date = "2021-12-31"
num_picks = 105

```

## 1.2 Download and clean  price data

```{python}
def clean_price_data(ticker, start_date, end_date, download=False):
    """
    Clean and process price data for a given ticker and date range.

    Args:
        ticker (str): Ticker symbol.
        start_date (str): Start date in "YYYY-MM-DD" format.
        end_date (str): End date in "YYYY-MM-DD" format.
        download (bool, optional): Whether to download and save the data to CSV.

    Returns:
        pd.DataFrame: Processed price data.
    """
    data_df = yf.download(ticker, start=start_date, end=end_date)
    
    # save the data to csv
    if download == True:
        cleaned_ticker = ''.join([char for char in ticker if char.isalnum()])
        csv_filename = f"data/{cleaned_ticker.lower()}_data.csv"
        data_df.to_csv(csv_filename)
    else: None

    # The difference betwen consecutive 'Close' data
    data_df['diff']  = data_df['Close'].diff()
    data_df['pct_return'] = data_df['Close'].pct_change() * 100
 
    # Drop Open, High, Low, Adj Close, Volume
    columns_to_drop = ['Open', 'High', 'Low', 'Adj Close', 'Volume']
    data_df = data_df.drop(columns_to_drop, axis=1)
    
    return(data_df)

```

### 1.2.1 Clean OVX data

```{python}
ovx_df = clean_price_data('^OVX', start_date, end_date, download=True)

# Create two columns contain positive and negative ovx change
ovx_df['diff_pos'] = ovx_df['diff'][ovx_df['diff'] > 0]
ovx_df['diff_neg'] = ovx_df['diff'][ovx_df['diff'] <= 0]

# Fill positive and negative ovx change NaN with 0 for regression
ovx_df['diff_pos'] = ovx_df['diff_pos'].fillna(0)
ovx_df['diff_neg'] = ovx_df['diff_neg'].fillna(0)

```

### 1.2.2 Clean ^TWII ,USDTWD=X and ^TNX data

```{python}
# Calculate market premium if have time !!!
twii_df = clean_price_data('^TWII', start_date, end_date)
fx_df = clean_price_data('USDTWD=X', start_date, end_date)
int_df = clean_price_data('^TNX', start_date, end_date)

```

### 1.2.3 Find top 105 market cap symbols

```{python}
# Extract ranked stock symbols from taifex website
URL = "https://www.taifex.com.tw/cht/9/futuresQADetail"
response = requests.get(URL)
html = response.content

# Create a BeautifulSoup object to parse the HTML
soup = bs(html, 'html.parser')
target_td_elements = soup.find_all('td', {'align': 'right', 'headers': 'name_a'})

tickers, companies = [], []
for idx, rows in enumerate(target_td_elements):
    # alternate between ticker and company name
    clean_text = ''.join([char for char in rows.text if char.isalnum()])
    
    # ticker start with 0
    tickers.append(clean_text) if idx % 2 == 0 else companies.append(clean_text)
    
# Save the top 105 ticker symbols into csv file
top_tickers = tickers[:num_picks]
with open("data/top_ticker_symbols.csv", "w", newline="") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["Ticker Symbol"])
    writer.writerows([[ticker] for ticker in top_tickers])

```

### 1.2.4 Get top 105 stock returns

```{python}
#| warning: false
#| output: false

# Create dataframe contain top 105 tickers (not optimized)
filepath = 'data/top_ticker_symbols.csv'
top_ticker_df = pd.read_csv(filepath)

## Check: print(top_ticker_df.shape)

individual_df = pd.DataFrame()
for symbol in top_ticker_df['Ticker Symbol']:
    symbol_txt = str(symbol) + '.TW'
    individual_df[symbol] = clean_price_data(symbol_txt, start_date, end_date)['pct_return']

```

## 1.3 Data Check

```{python}
print(ovx_df.head())
print(twii_df.head())
print(fx_df.head())
print(int_df.head())
print(individual_df.head())
```

# 2. Data Visualization

```{python}
def plot_and_save(df, label, filename):
    plt.figure().gca().tick_params(axis='both', which='both', length=0.02)
    plt.plot(df.index, df['Close'], 'k', lw=1.25, label=label)
    plt.xticks(rotation=45, fontsize=8)  # Changed fontsize to 8
    plt.yticks(fontsize=8)  # Changed fontsize to 8
    plt.legend(loc='upper right', prop={'size': 10})
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()
```

## 2.1 Plot CBOE Crude Oil Volatility Index

```{python}
plot_and_save(ovx_df, 'CBOE Crude Oil Volatility Index', 'plots/ovx.png')

```

!["CBOE Crude Oil Volatility Index"](plots/ovx.png)

## 2.2 Plot TSEC weighted index

```{python}
plot_and_save(twii_df, 'TSEC weighted index', 'plots/twii.png')

```

!["TSEC weighted index"](plots/twii.png)

## 2.3 Plot Interest Rate

```{python}
plot_and_save(int_df, 'US 10-Year Treasury Bond Yield', 'plots/int_rate.png')

```

!["US 10-Year Treasury Bond Yield"](plots/int_rate.png)

# 3. Model OVX movement on aggregate stock return

## 3.1 Base Model

Set up the Base model without incorporating OVX:

$R_{\textit{prem},t}^{m} = \beta_{0} + \beta_{1}\textit{FX}_{t} + \beta_{2}R_{\textit{prem},t-1}^{m} + \varepsilon_t$

The dependent variable $R_{\textit{prem},t}^{m} = R_{m,t}-R_{f,t}$ represents the daily Taiwan aggregate stock market excess return (pending), $\textit{FX}_t$ represents the foreign exchange rate between the New Taiwan Dollar and the U.S. Dollar, and $\Delta\textit{OVX}_t$ represents the OVX index movement between time t-1 and time t. To reflect earlier market condition and momentum, the lagged market premium is added. Moreover, because international investments have a big influence on Taiwan’s stock market, the foreign exchange rate between the New Taiwan Dollar and the US Dollar is also included.

```{python}
# Align the dataframes by date index and drop rows with missing data
merged_df = pd.concat([twii_df['pct_return'], fx_df['Close']], axis=1, keys=['mkt_rt', 'fx'])
merged_df.dropna(inplace=True)

# Create lagged variable for twii_df['pct_return']
merged_df['lag_mkt_rt'] = merged_df['mkt_rt'].shift(1)

# Drop any rows with NaN values (due to lagged variables or otherwise)
merged_df.dropna(inplace=True)

# Separate independent and dependent variables
X = merged_df[['fx', 'lag_mkt_rt']]
y = merged_df['mkt_rt']

# Add a constant (intercept) to the independent variables
X = sm.add_constant(X)

# Run the regression
model = sm.OLS(y, X)
result0 = model.fit()
print(result0.summary())

```

When we use the exchange rate between TWD and USD as well as the lagged market premium as independent variables, we can see that the coefficient for the exchange rate is significant at a confidence interval of `??%`, while the coefficient for the lagged market premium is significant at a confidence interval of `??%`. Because the foreign exchange rate is computed by converting 1 USD to TWD, the result shows that the value of the New Taiwan Dollar has a positive impact on the aggregate stock return. Furthermore, the lagged dependent variable has a positive effect on market excess return, indicating that the Taiwan stock market retains momentum beyond trading days. These findings are consistent across three models. The introduction of the OVX index into the model simply changes the magnitude of the effect.

## 3.2 Symmetric Impact

We first assume that the impact of OVX on Taiwan stock returns is symmetric:

$R_{\textit{prem},t}^{m} = \beta_{0} + \beta_{1}\textit{FX}_{t} + \beta_{2}R_{\textit{prem},t-1}^{m} + \beta_{3}\Delta\textit{OVX}_{t} + \varepsilon_t$

```{python}
merged_df = pd.concat([twii_df['pct_return'], fx_df['Close'], ovx_df['diff']], axis=1, keys=['mkt_rt', 'fx', 'ovx_diff'])
merged_df.dropna(inplace=True)

merged_df['lag_mkt_rt'] = merged_df['mkt_rt'].shift(1)
merged_df.dropna(inplace=True)

X = merged_df[['fx', 'lag_mkt_rt', 'ovx_diff']]
X = sm.add_constant(X)
y = merged_df['mkt_rt']

model = sm.OLS(y, X)
result1 = model.fit()
print(result1.summary())

```

According to the empirical result, increased levels of uncertainty in the oil market are associated with decreased levels of average stock returns in Taiwan. One of the possible explanations for this phenomenon is that, given that oil is a crucial component in the manufacture of a wide variety of goods, an increase in the volatility of oil prices has a deleterious effect on the investments that corporations make in the real economy, which, in turn, has a negative impact on the stock returns.

## 3.3 Asymmetric Impact

After assessing the symmetrical impact of OVX on Taiwan stock market, it is sufficient to execute an analysis of the asymmetric influence of OVX movement on the Taiwan stock market by splitting the relevant data regarding OVX movement into two distinct groups.

$R_{\textit{prem},t}^{m}  = \beta_{0} + \beta_{1}\textit{FX}_{t} + \beta_{2}R_{\textit{prem},t-1}^{m}  + \beta_{31}\Delta\textit{OVX}_{t}^{+} + \beta_{32}\Delta\textit{OVX}_{t}^{-} + \varepsilon_t$

$\Delta\textit{OVX}_{t}^{+} = \textit{max}(\Delta\textit{OVX}_t, 0)$ and $\Delta\textit{OVX}_{t}^{-} = \textit{min}(\Delta\textit{OVX}_t, 0)$ denote positive and negative OVX shock, respectively. The setting in the regression model (2) is similar to Xiao et. al. (2018), who compare the asymmetric impacts of oil price uncertainty on Chinese stock returns.

```{python}
merged_df = pd.concat([twii_df['pct_return'], fx_df['Close'], ovx_df['diff_pos'], ovx_df['diff_neg'], ], 
                        axis=1, keys=['mkt_rt', 'fx', 'ovx_pos_diff', 'ovx_neg_diff'])
merged_df.dropna(inplace=True)

merged_df['lag_mkt_rt'] = merged_df['mkt_rt'].shift(1)
merged_df.dropna(inplace=True)

X = merged_df[['fx', 'lag_mkt_rt', 'ovx_pos_diff', 'ovx_neg_diff']]
X = sm.add_constant(X)
y = merged_df['mkt_rt']

model = sm.OLS(y, X)
result2 = model.fit()
print(result2.summary())

```

We can observe  that both positive and negative movement of the OVX have a negative impact on aggregate stock return. This means that any change in the degree of oil price uncertainty will always have a negative impact on the stock market. In other words, whether the price of oil rises or falls in a short amount of time, the stock market will suffer. We can also observe that a positive change in oil price uncertainty has a greater negative impact on aggregate stock return than a negative change. This conclusion is consistent with the proposed explanation in the first model, in which we say that the volatility of oil prices has a negative influence on corporate investments in the real economy.

# 4. Model OVX movement on individual stock return

## 4.1 Post-ranking quartly Jensen’s alpha

## 4.2 Impact on individual stock return

## 4.3